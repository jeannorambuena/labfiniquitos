import re


def validar_rut(rut_cuerpo, rut_dv):
    """
    Valida que el RUT chileno sea correcto, incluyendo el d√≠gito verificador.
    """
    print(
        # üëà Depuraci√≥n
        f"[VALIDADOR] Validando RUT -> cuerpo: {rut_cuerpo}, dv: {rut_dv}")
    # Validar que el cuerpo del RUT y el d√≠gito verificador no est√©n vac√≠os
    if not rut_cuerpo or not rut_dv:
        return False, "RUT y d√≠gito verificador son obligatorios."

    # Validar que el cuerpo del RUT contenga solo n√∫meros
    if not rut_cuerpo.isdigit() or len(rut_cuerpo) < 7:
        return False, "El RUT solo debe contener n√∫meros y tener al menos 7 d√≠gitos."

    # Validar que el d√≠gito verificador sea un n√∫mero o la letra 'K'
    if not re.match(r'^[0-9Kk]$', rut_dv):
        return False, "El d√≠gito verificador debe ser un n√∫mero o la letra K."

    # Calcular el d√≠gito verificador esperado
    dv_calculado = calcular_dv(rut_cuerpo)

    # Validar el d√≠gito verificador ingresado contra el calculado
    if dv_calculado != rut_dv.upper():
        return False, f"RUT inv√°lido. El d√≠gito verificador deber√≠a ser {dv_calculado}."

    return True, "RUT v√°lido."


def calcular_dv(rut):
    """
    Calcula el d√≠gito verificador del RUT chileno usando el algoritmo M√≥dulo 11.
    """
    suma = 0
    factor = 2

    # Invertimos el RUT para aplicar el factor desde el final hacia el inicio
    for digit in reversed(rut):
        suma += int(digit) * factor
        factor = 2 if factor == 7 else factor + 1

    # Calculamos el d√≠gito verificador
    dv = 11 - (suma % 11)

    if dv == 11:
        return '0'
    elif dv == 10:
        return 'K'
    else:
        return str(dv)
